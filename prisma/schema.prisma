generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String
  role           Role
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  address        Address?
  assignedOrders Order[]  @relation("AssignedOrders")
  orders         Order[]  @relation("UserOrders")
  reviews        Review[]
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  postcode  String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                 String        @id @default(cuid())
  userId             String
  assignedEngineerId String?
  status             OrderStatus
  paymentStatus      PaymentStatus @default(UNPAID)
  paymentMethod      String        @default("CREDIT_CARD")
  isParkingAvailable Boolean
  isCongestionZone   Boolean
  inspectionTime     String
  date               DateTime
  orderNotes         String?
  totalPrice         String
  invoiceId          String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  assignedEngineer   User?         @relation("AssignedOrders", fields: [assignedEngineerId], references: [id])
  user               User          @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  services           Service[]
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  rating    Int      @default(5)
  title     String
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Service {
  id              String           @id @default(cuid())
  name            String
  type            ServiceType
  category        String
  description     String?
  propertyType    PropertyType
  residentialType ResidentialType?
  commercialType  CommercialType?
  unitType        String?
  issuedDate      DateTime?
  expiryDate      DateTime?
  orderId         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  packages        Package[]        @relation("ServicePackages")
  order           Order?           @relation(fields: [orderId], references: [id])
}

model Package {
  id          String   @id @default(cuid())
  serviceId   String
  name        String
  description String?
  unitCount   Int
  price       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation("ServicePackages", fields: [serviceId], references: [id], onDelete: Cascade)
}

model SiteSettings {
  id            String   @id @default(cuid())
  email         String
  phone         String
  address       String
  websiteUrl    String?
  facebookUrl   String?
  twitterUrl    String?
  instagramUrl  String?
  openingHours  String?
  contactPerson String?
  updatedAt     DateTime @updatedAt
}

enum ServiceType {
  CERTIFICATE
  REPAIR
  INSTALLATION
  INSPECTION
  OTHER
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
}

enum ResidentialType {
  BUNGALOW
  MID_TERRACED_HOUSE
  DETACHED_HOUSE
  SEMI_DETACHED_HOUSE
  FLAT
  APARTMENT
  OTHER
}

enum CommercialType {
  PUB
  STORE
  OFFICE
  RESTAURANT
  WAREHOUSE
  OTHER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  REFUNDED
}
