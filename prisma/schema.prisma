datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String
  role           String // Replaces the UserType enum
  address        Address?
  orders         Order[]  @relation("UserOrders")
  assignedOrders Order[]  @relation("AssignedOrders")
  reviews        Review[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  postcode  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                 String    @id @default(cuid())
  user               User      @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  assignedEngineer   User?     @relation("AssignedOrders", fields: [assignedEngineerId], references: [id], onDelete: SetNull)
  assignedEngineerId String?
  services           Service[]
  status             String    @default("PENDING")
  paymentStatus      String    @default("UNPAID")
  paymentMethod      String    @default("CREDIT_CARD")
  isParkingAvailable Boolean
  isCongestionZone   Boolean
  inspectionTime     String
  date               DateTime
  orderNotes         String?
  totalPrice         String
  invoiceId          String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int      @default(5)
  title     String
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id              String    @id @default(cuid())
  name            String
  type            String // Replaces the ServiceType enum
  category        String // Replaces the Category enum
  description     String?
  propertyType    String // Replaces the PropertyType enum
  residentialType String? // Replaces the ResidentialType enum
  commercialType  String? // Replaces the CommercialType enum
  unitType        String?
  issuedDate      DateTime?
  expiryDate      DateTime?
  order           Order?    @relation(fields: [orderId], references: [id])
  orderId         String?
  packages        Package[] @relation("ServicePackages")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Package {
  id          String   @id @default(cuid())
  service     Service  @relation("ServicePackages", fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   String
  name        String
  description String?
  unitCount   Int
  price       String // Store price as a string for precise control
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SiteSettings {
  id            String   @id @default(cuid())
  email         String
  phone         String
  address       String
  websiteUrl    String?
  facebookUrl   String?
  twitterUrl    String?
  instagramUrl  String?
  openingHours  String?
  contactPerson String?
  updatedAt     DateTime @updatedAt
}
